"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const core_1 = require("@jscpd/core");
const finder_1 = require("@jscpd/finder");
function prepareOptions(cli) {
    let config = cli.config ? path_1.resolve(cli.config) : path_1.resolve('.jscpd.json');
    let storedConfig = {};
    let packageJsonConfig;
    const argsConfig = {
        minTokens: cli.minTokens ? Number(cli.minTokens) : undefined,
        minLines: cli.minLines ? Number(cli.minLines) : undefined,
        maxLines: cli.maxLines ? Number(cli.maxLines) : undefined,
        maxSize: cli.maxSize,
        debug: cli.debug,
        executionId: cli.executionId,
        silent: cli.silent,
        blame: cli.blame,
        verbose: cli.verbose,
        cache: cli.cache,
        output: cli.output,
        format: cli.format,
        formatsExts: finder_1.parseFormatsExtensions(cli.formatsExts),
        list: cli.list,
        mode: cli.mode,
        absolute: cli.absolute,
        noSymlinks: cli.noSymlinks,
        skipLocal: cli.skipLocal,
        ignoreCase: cli.ignoreCase,
        gitignore: cli.gitignore,
    };
    if (cli.threshold !== undefined) {
        argsConfig.threshold = Number(cli.threshold);
    }
    if (cli.reporters) {
        argsConfig.reporters = cli.reporters.split(',');
    }
    if (cli.format) {
        argsConfig.format = cli.format.split(',');
    }
    if (cli.ignore) {
        argsConfig.ignore = cli.ignore.split(',');
    }
    argsConfig.path = cli.path ? [cli.path].concat(cli.args) : cli.args;
    Object.keys(argsConfig).forEach((key) => {
        if (typeof argsConfig[key] === 'undefined') {
            delete argsConfig[key];
        }
    });
    if (!fs_1.existsSync(config)) {
        config = '';
    }
    else {
        storedConfig = fs_extra_1.readJSONSync(config);
    }
    if (fs_1.existsSync(process.cwd() + '/package.json')) {
        packageJsonConfig = fs_extra_1.readJSONSync(process.cwd() + '/package.json').jscpd || {};
    }
    const result = Object.assign(Object.assign(Object.assign(Object.assign({ config }, core_1.getDefaultOptions()), packageJsonConfig), storedConfig), argsConfig);
    if (config in result && result.config && path_1.isAbsolute(result.config) && result.path) {
        result.path = result.path.map((path) => path_1.resolve(path_1.dirname(config), path));
    }
    result.reporters = result.reporters || [];
    result.listeners = result.listeners || [];
    if (result.silent) {
        result.reporters = result.reporters
            .filter((reporter) => !reporter.includes('console'))
            .concat('silent');
    }
    if (result.threshold !== undefined) {
        result.reporters = [...result.reporters, 'threshold'];
    }
    return result;
}
exports.prepareOptions = prepareOptions;
//# sourceMappingURL=options.js.map