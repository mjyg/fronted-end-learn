"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@jscpd/core");
const safe_1 = require("colors/safe");
const finder_1 = require("@jscpd/finder");
const init_1 = require("./init");
const print_1 = require("./print");
const crypto_1 = require("crypto");
const store_1 = require("./init/store");
const tokenizer_1 = require("@jscpd/tokenizer");
const reporters_1 = require("./init/reporters");
const subscribers_1 = require("./init/subscribers");
const hooks_1 = require("./init/hooks");
function jscpd(argv) {
    const packageJson = require(__dirname + '/../package.json');
    console.time(safe_1.italic(safe_1.grey('Detection time:')));
    const cli = init_1.initCli(packageJson, argv);
    const options = init_1.initOptions(cli);
    if (options.list) {
        print_1.printSupportedFormat();
    }
    if (options.debug) {
        print_1.printOptions(options);
    }
    const files = finder_1.getFilesToDetect(options);
    if (options.debug) {
        print_1.printFiles(files);
    }
    else {
        const hashFunction = (value) => {
            return crypto_1.createHash('md5').update(value).digest('hex');
        };
        options.hashFunction = options.hashFunction || hashFunction;
        const store = store_1.getStore(cli.store);
        const statistic = new core_1.Statistic(options);
        const tokenizer = new tokenizer_1.Tokenizer();
        const detector = new finder_1.InFilesDetector(tokenizer, store, statistic, options);
        reporters_1.registerReporters(options, detector);
        subscribers_1.registerSubscribers(options, detector);
        hooks_1.registerHooks(options, detector);
        return detector.detect(files).then((clones) => {
            console.timeEnd(safe_1.italic(safe_1.grey('Detection time:')));
            return clones;
        }).finally(() => {
            store.close();
        });
    }
}
exports.jscpd = jscpd;
//# sourceMappingURL=index.js.map