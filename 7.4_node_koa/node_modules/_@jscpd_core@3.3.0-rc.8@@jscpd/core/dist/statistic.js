"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Statistic {
    constructor(options) {
        this.options = options;
        this.statistic = {
            detectionDate: new Date().toISOString(),
            formats: {},
            total: Statistic.getDefaultStatistic(),
        };
    }
    static getDefaultStatistic() {
        return {
            lines: 0,
            sources: 0,
            clones: 0,
            duplicatedLines: 0,
            percentage: 0,
            newDuplicatedLines: 0,
            newClones: 0,
        };
    }
    subscribe() {
        return {
            CLONE_FOUND: this.cloneFound.bind(this),
            START_DETECTION: this.matchSource.bind(this),
        };
    }
    getStatistic() {
        return this.statistic;
    }
    cloneFound(payload) {
        const { clone } = payload;
        const id = clone.duplicationA.sourceId;
        const id2 = clone.duplicationB.sourceId;
        const linesCount = clone.duplicationA.end.line - clone.duplicationA.start.line;
        this.statistic.total.clones++;
        this.statistic.total.duplicatedLines += linesCount;
        this.statistic.formats[clone.format].total.clones++;
        this.statistic.formats[clone.format].total.duplicatedLines += linesCount;
        this.statistic.formats[clone.format].sources[id].clones++;
        this.statistic.formats[clone.format].sources[id].duplicatedLines += linesCount;
        this.statistic.formats[clone.format].sources[id2].clones++;
        this.statistic.formats[clone.format].sources[id2].duplicatedLines += linesCount;
        this.updatePercentage(clone.format);
    }
    matchSource(payload) {
        const { source } = payload;
        const format = source.getFormat() || 'javascript';
        if (!(format in this.statistic.formats)) {
            this.statistic.formats[format] = {
                sources: {},
                total: Statistic.getDefaultStatistic(),
            };
        }
        this.statistic.total.sources++;
        this.statistic.total.lines += source.getLinesCount();
        this.statistic.formats[format].total.sources++;
        this.statistic.formats[format].total.lines += source.getLinesCount();
        this.statistic.formats[format].sources[source.getId()] =
            this.statistic.formats[format].sources[source.getId()] || Statistic.getDefaultStatistic();
        this.statistic.formats[format].sources[source.getId()].sources = 1;
        this.statistic.formats[format].sources[source.getId()].lines += source.getLinesCount();
        this.updatePercentage(format);
    }
    updatePercentage(format) {
        this.statistic.total.percentage = Statistic.calculatePercentage(this.statistic.total.lines, this.statistic.total.duplicatedLines);
        this.statistic.formats[format].total.percentage = Statistic.calculatePercentage(this.statistic.formats[format].total.lines, this.statistic.formats[format].total.duplicatedLines);
        Object.entries(this.statistic.formats[format].sources).forEach(([id, stat]) => {
            this.statistic.formats[format].sources[id].percentage = Statistic.calculatePercentage(stat.lines, stat.duplicatedLines);
        });
    }
    static calculatePercentage(totalLines, clonedLines) {
        return totalLines ? Math.round((10000 * clonedLines) / totalLines) / 100 : 0.0;
    }
}
exports.Statistic = Statistic;
//# sourceMappingURL=statistic.js.map